#!/usr/bin/python3 -u
#


import sys
import socket
import time
import datetime
import select
import json
import threading
import multiprocessing

from base64 import b64encode

# dictionary to keep track of packets
packets_sent = {}

# list to keep track of acks
acks_recieved = []

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0
PACKET_TIME = 0.5
MAX_RETRANSMISSION = 15


# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

time.sleep(0.5)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
# sock.setblocking(0)
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " 4254send: " + string + "\n")

# Sends a single packet given the packet json object
def send_single_packet(packet):
  global SEQUENCE
  if sock.sendto(packet.encode(), dest) < len(packet):
      log("[error] unable to fully send packet")
      #return False
  else:
      log("[send data] " + str(SEQUENCE))
      #return True

# Sends the next packet in our output sequence, only called if most recent ACK received matches our expected sequence number
def send_next_packet():
  global SEQUENCE
  # ThreadCount and buffer to increase performance
  ThreadCount = 45
  buffer = []

  # For loop to create a separate thread for each packet within our message and threadcount range
  for i in range(ThreadCount):
    data = sys.stdin.buffer.read(DATA_SIZE)
    # If there's something left to send: create the packet, send, update our packet dictionary, buffer, and Sequence number
    if (len(data) > 0):
      msg = json.dumps({"sequence": SEQUENCE, 
                        "data": b64encode(data).decode(), 
                        "ack": False, 
                        "eof": False,
                        "retransmit": False})
      
      if sock.sendto(msg.encode(), dest) < len(msg):
        log("[error] unable to fully send packet")
      else:
        log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
      packets_sent[SEQUENCE] = (data, time.time(), 1)
      buffer.append(msg)
      SEQUENCE+=len(data)
  # Return the buffer of sent messages/packets
  return buffer


# Creates thread list and uses our send_single_packet function as the target of each thread
def send_threaded(buffer):
  ThreadList = []
  # For each packet in our buffer (Created by send_next_packet): Create and start a thread and append it to our thread list
  for packet in buffer:
    thread = threading.Thread(target=send_single_packet, args=(packet,))
    thread.start()
    ThreadList.append(thread)
    
  # Join all the threads at the end
  for thread in ThreadList:
    thread.join()


# Function to retransmit dropped packets based on timeout and a max retransmission constant
def retransmit():
  global packets_sent
  for key, (data, time_sent, send_count) in list(packets_sent.items()):
    # decoded = json.loads(msg.decode())
    # data = decoded['data']
    time_elapsed = time.time() - time_sent
    # print(time_elapsed)
    log(str(time_elapsed))
    if (time_elapsed > PACKET_TIME):
      if (send_count < MAX_RETRANSMISSION):
        msg = json.dumps({"sequence": key, 
                          "data": b64encode(data).decode(), 
                          "ack": False, 
                          "eof": False,
                          "retransmit": True})
        if sock.sendto(msg.encode(), dest) < len(msg):
          log("[error] unable to fully send packet")
        else:
          log("[send data] " + str(SEQUENCE) + " (" + str(len(msg)) + ")")
        packets_sent[key] = (data, time.time(), send_count+1)
      else:
        log("[MAX RETRANSMISSION REACHED]")
        del packets_sent[key]
    
        
# Send first packet
buffer = send_next_packet()
send_threaded(buffer)
# Now read in data, send packets
while True:
  
  log("ABOUT TO SLEEP")
  # Prevents socket from blocking
  readable, writeable, exceptional = select.select([sock], [], [], PACKET_TIME)

  if len(readable) > 0:
    result = sock.recvfrom(MSG_SIZE)
    (data, addr) = result
    try:
      decoded = json.loads(data.decode())
      log("[recv pkt] " + str(decoded))
      log("[recv ack] " + str(decoded['ack']))

        

      # If there is an ack, send next packet
      if decoded['ack'] == SEQUENCE:
        # If the ack for this packet hasn't been received yet: Append it to acks_received and remove it from packets_sent (Ensures packets_sent reflects only those packets who still have outstanding ACKS)
        if (decoded['ack'] not in acks_recieved):
          acks_recieved.append(decoded['ack'])

          if decoded['ack'] in packets_sent:
            packets_sent.pop(decoded['ack'])

          # Try to send next packet; break if no more data
          if (not send_next_packet()):
            break
        # else:
        # #   # Expected ack was not recieved
        # #   if decoded['ack'] in packets_sent:
        # #     packets_sent.pop(decoded['ack'])
        # #   # if (not send_next_packet()) and (len(packets_sent) == 0):
        # #   #   break
        #   retransmit()

        
    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  # else:
  #   log("[error] timeout")
  #   sys.exit(-1)
  #
  retransmit()

# SHUTDOWN - Send our EOF a number of times to ensure its received before shutting down
for i in range(0, 10):
  sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}).encode(), dest)

# print("packets sent")
# print(packets_sent)
# print(acks_recieved)
# print(packets_sent.keys())
  
sys.exit(0)
