#!/usr/bin/python3 -u
#


import sys
import socket
import time
import datetime
import select
import json

from base64 import b64decode

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def print_packets_in_order():
  sorted_packets = dict(sorted(packets_recieved.items()))
  for packet in sorted_packets.values():
    data = b64decode(packet['data'].encode())    
    sys.stdout.buffer.write(data)
  # print(packets_recieved)

MSG_SIZE = 1500
TIMEOUT = 30

# dictionary to keep track of packets
packets_recieved = {}
last_ack = 0

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

# Send ack based on the last message for which we have received all packets before it and itself (Cumulative ack)
def send_ack():
  sequence = 0
  ack_to_send = None
  prev_entry = None
  curr_entry = packets_recieved.get(sequence)
  while True:
    prev_entry = curr_entry
    curr_entry = packets_recieved.get(sequence)
    # If the current sequence number we're checking for hasn't been received, send the previous ack
    if curr_entry is None:
      ack_to_send = prev_entry
      break
    else:
      if curr_entry['eof']:
        ack_to_send = curr_entry
        break
    sequence += len(curr_entry['data'])

  msg = json.dumps({"ack": ack_to_send['sequence'] + len(data)})
  log("ABOUT TO SEND " + msg)
  if sock.sendto(msg.encode(), addr) < len(msg):
    log("[error] unable to fully send packet")


# Now listen for packets
while True:
  # Receive message from the socket based on message size
  result = sock.recvfrom(MSG_SIZE)

  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result # note, data is bytes, so we must convert back to string before use

    try:
      decoded = json.loads(data.decode())
      # If the EOF flag is set, exit
      if (decoded['eof']):
        packets_recieved[decoded['sequence']+1] = decoded
        log("\n[UPDATING RECEIVED PACKETS] " + str(packets_recieved))
        last_ack = decoded['sequence']+1
        msg = json.dumps({"ack": decoded['sequence'] + 1, "timestamp": time.time(), "eof": True})
        log("ABOUT TO SEND " + msg)
        #for i in range(20):
        if sock.sendto(msg.encode(), addr) < len(msg):
          log("[error] unable to fully send packet")
        else:
            log("[SENDING FINAL EOF ACK] " + str(decoded['sequence'] + 1))
            

        print_packets_in_order()
        log("[completed]")
        sys.exit(0)

      # If there is data, we accept it and print it out
      if (decoded['data']):
        packets_recieved[decoded["sequence"]] = decoded
        data = b64decode(decoded['data'].encode())
        log("\n[UPDATING RECEIVED PACKETS] " + str(packets_recieved))
        # print(packets_recieved)
        # If we receive data, we assume it's in-order
        # You will need to do much more here
        log("[recv data] " + str(decoded['sequence']) + " (" + str(len(data)) + ") ACCEPTED (in-order)")
        # sys.stdout.buffer.write(data)

      #send_ack(decoded)
      # Send individual ack of the last received packet
      last_ack = decoded['sequence'] 
      msg = json.dumps({"ack": decoded['sequence'] + len(data), "timestamp": time.time(), "eof": False})
      log("ABOUT TO SEND " + msg)
      if sock.sendto(msg.encode(), addr) < len(msg):
        log("[error] unable to fully send packet")

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    # Create and call a function similar to check_acks here
    decoded = json.loads(packets_recieved[last_ack])
    data = b64decode(decoded['data'].encode())
    msg = json.dumps({"ack": decoded['sequence'] + len(data), "timestamp": time.time(), "eof": decoded['eof']})
    log("ABOUT TO SEND " + msg)
    if sock.sendto(msg.encode(), addr) < len(msg):
      log("[error] unable to fully send packet")

    log("[error] timeout")
    sys.exit(-1)
