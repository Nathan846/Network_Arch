#!/usr/bin/python3 -u
#


import sys
import socket
import time
import datetime
import select
import multithreading
import json

from base64 import b64encode
packet_timeout = 0.5
MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0
packetTO = 0
# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)
Packets = {}
time.sleep(0.5)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def currtime():
  return int(time.time()*1000)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " 4254send: " + string + "\n")

def send_buffer():
  threads = []
  for packet in buffer:
    thread = threading.Thread(target = send_packet, args = (packet))
    thread.start()
    threads.append(thread)
  for thread in threads:
    thread.join()

def send_packet(p):
  if(sock.sendto(packet.encode(), dest) < len(p)):
    log("Error Packet not sent")
  else:
    log(f"sent packet [SEQUENCE]")

def update_time(ts):
  rtt = current_time() - ts
  RTTs.append(rtt)
  if(RTTs):
    packetTO = int((sum(RTTs) / len(RTTs)) )

def end_handshake():
  eof_msg = json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack", False}).encode()
  sock.sendto(eof_msg, dest)
  sys.exit(0)




def send_next_packet():
  data = sys.stdin.buffer.read(DATA_SIZE)
  if (len(data) > 0):
    msg = json.dumps({"sequence": SEQUENCE, "data": b64encode(data).decode(), "ack": False, "eof": False})
    Packets[SEQUENCE] = (data, currtime(),1)
    if sock.sendto(msg.encode(), dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
    SEQUENCE+=len(data)
    return True
  else:
    return False


def waiting():
  current_time = currtime()
  for key, (data, ts, count) in Packets.items():
    if(current_time > ts + packet_timeout):
      if(count < MAX_COUNT):
        msg = json.dumps('data', b64encode(data).encode(),"ack":False, "eof":False, "retransmit":True)
        sock.sendto(msg.encode(), dest)
        Packets[key] = (data, current_time, count+1)
        log(f"Sending packet {key} with msg {msg} sending it for the {count+1} time")
      else:
        del Packets[key]


buffer = send_next_packet()

send_buffer()

# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")
  result = sock.recvfrom(MSG_SIZE)
  r, w, e = select.select([sock],[],[], packet_timeout)
  if r:
    (data, addr) = sock.recvfrom(MSG_SIZE)
    try:
      decoded = json.loads(data.decode())
      ack_key = decoded['ack']
      if(decoded['ack']== SEQUENCE):
        for key in Packet.key():
          NewSeq = key + len(sentPackets[key][0])  
          if (adjustedSequence == decoded['ack']):
            ack_Key = key

            ackPacket = sentPackets.pop(ack_Key, None)

            log(f"[recv pkt] {SEQUENCE}")
            log(f"[recv ack] {SEQUENCE}")
            
            if ackPacket is not None:
                updateRTT(ackPacket[1])
            
            if (not send_next_packet()):
              break
            
      except (ValueError, KeyError, TypeError):
        log("[recv corrupt packet]")
        sys.exit(1)

    checkTimeout()    
end_handshake()
sys.exit(0)